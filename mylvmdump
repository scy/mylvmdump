#!/bin/sh

# Do not log what we do.
# It may be confusing when later using mysql interactively.
export MYSQL_HISTFILE=/dev/null

# List of options for parseable mysql results.
PARSEABLE='--skip-column-names'

# Initial set of mysqldump options to use.
DUMPOPTS='--skip-opt --add-drop-table --add-locks --create-options --disable-keys --extended-insert --quick --set-charset'

# MySQL command to run before snapshotting.
FLUSHCMD='FLUSH TABLES WITH READ LOCK'

# Exit with an error message.
die() {
	echo "$1"
	exit 1
}

# Run a MySQL command-line tool, supplying configuration data on FD 4.
runwithcfg() {
	# --defaults-extra-file needs to be the first option,
	# therefore take apart command name and parameters.
	cmd="$1"
	shift
	"$cmd" --defaults-extra-file=/dev/fd/4 "$@" 4<<-EOF
		[client]
		user=$user
		password=$pass
		host=$host
		EOF
}

# Interpret boolean configuration variables.
bool() {
	# If the variable is not set, this equals "false".
	[ -z "${!1}" ] && return 1
	# If it is set to 0, -, off or anything starting with "n" or "f" (like
	# "no", "nyet" or "false"), thas equals "false" as well.
	case "${!1}" in
		0|-|off|ofF|oFf|oFF|Off|OfF|OFf|OFF|n*|N*|f*|F*)
			return 1
			;;
	esac
	# Anything else equals true.
	return 0
}

# Run a hook.
runhook() {
	# Find the hook in the declare -F listing (which is formatted like:)
	# declare -f functionname
	declare -F | grep -q " $1\$" || return 1
	# Store the hook name to be able to pass $@ in a second.
	hookname="$1"
	shift
	# Call the hook.
	$hookname "$@"
}

# Check the free space.
checkfreespace() {
	# If "keepfree" is not set, we're not looking at disk space at all.
	[ -z "$keepfree" ] && return 0
	# The directory we want to retrieve the free space for.
	dir="$(dirname "$1")"
	# Retrieve the free space in the unit "keepfree" is in.
	free="$(df -B "1$keepfree_suf" "$dir" | tail -n +2 | awk '{ print $4 }')"
	# If this is more than or equal our minimum, everything is fine.
	[ "$free" -ge "$keepfree_num" ] && return 0
	# Else issue a warning and return false.
	echo "  not enough space: only $free$keepfree_suf left, requiring $keepfree_num$keepfree_suf"
	return 1
}

# Check whether a database is filtered or not.
dbfiltered() {
	[ "$(getflag "$dbfilterdefault" '+-' "$1" "$dbfilter")" = '-' ]
}

# Get the filter flag for database/table $3 by parsing the list in $4. Default
# flag is $1, allowed characters are $2.
getflag() {
	result="$(echo -n "$1$(echo "$4" | while read line; do
		# We have not yet retrieved a flag from this line.
		flag=''
		# Default mode character is ".".
		mode='.'
		# As long as we have not found a flag...
		while [ -z "$flag" ]; do
			# Cut off the first char and shorten $line by one.
			char="$(echo "$line" | cut -b 1  2>/dev/null)"
			line="$(echo "$line" | cut -b 2- 2>/dev/null)"
			# If $char is a valid mode character, store it.
			if   [ -n "$(echo "$char" | tr -cd '.^')" ]; then
				mode="$char"
			# If $char is a valid flag character, store it.
			elif [ -n "$(echo "$char" | tr -cd "$2")" ]; then
				flag="$char"
			else
				# We have not yet found a flag (loop condition)
				# but content seems to begin, so this is
				# apparently an invalid line, go on with the
				# next line.
				continue 2
			fi
		done
		# If we have not found a flag, go on with the next line.
		if [ -z "$(echo "$flag" | tr -cd "$2")" ]; then
			continue;
		fi
		# If mode is "exact match", match exactly.
		if [ "$mode" = '.' ]; then
			[ "$3" = "$line" ] && echo -n "$flag"
		# If mode is "regex match", match by regex.
		elif [ "$mode" = '^' ]; then
			echo "$3" | grep -E -q "$line" 2>/dev/null && echo -n "$flag"
		fi
	done)" | tail -c 1)" # Only take the last flag we found.
	# Return the flag.
	echo -n "$result"
}

# Get a newline-separated list of database names.
getdatabases() {
	runwithcfg mysql $PARSEABLE <<-"EOF"
		SHOW DATABASES;
		EOF
}

# Get a newline-separated list of table names in database $1.
gettables() {
	runwithcfg mysql $PARSEABLE "$1" <<-"EOF"
		SHOW TABLES;
		EOF
}

# Get the inclusion flag for table $2 in database $1.
# TODO: The hash value should be cached.
gettableflag() {
	# Set to default.
	flag="$tablefilterdefault"
	# Create a list of variable names to consider.
	vars='tablefilter'
	# If the table name is valid in sh variables, add the plain name.
	[ "$1" = "$(echo "$1" | grep -E "^[a-zA-Z_][0-9a-zA-Z_]*$")" ] && vars="$vars tablefilter__$1"
	# Add the hashed variable names, if the algorithm is available.
	for hash in md5 sha1 sha512; do # Update docs when changing algorithm list.
		which "${hash}sum" >/dev/null 2>&1 && vars="$vars tablefilter_${hash}_$(echo -n "$1" | ${hash}sum | cut -d ' ' -f 1)"
	done
	# Get the flag for each of the variables.
	for var in $vars; do
		# This works because the current $flag value is passed as default.
		flag="$(getflag "$flag" '+-~' "$2" "${!var}")"
	done
	echo "$flag"
}

# Get all tables listed in $3 from database $2 with an inclusion flag of $1.
gettablesmatching() {
	echo "$3" | while read table; do
		[ "$(gettableflag "$2" "$table")" = "$1" ] && echo "$table"
	done
}

# Assume that the tables are frozen and create the snapshot.
createsnapshot() {
	# TODO.
	:
}

# Create an LVM snapshot of the database.
snapshot() {
	# If LVM is not to be used, do nothing.
	bool uselvm || return
	# Check whether the FIFO exists.
	if [ -e "$fifo" ]; then
		if bool destroyfifo; then
			rm "$fifo" || die "Could not destroy FIFO '$fifo'."
		else
			die "FIFO '$fifo' already exists."
		fi
	fi
	# Create the FIFO.
	mkfifo -m 0600 "$fifo" || die "Could not create FIFO '$fifo'."
	# The following would lock until the reader (mysql) started, which is not
	# what we want. Therefore, run it in the background.
	echo "$FLUSHCMD;" > "$fifo" &
	statusreturned=''
	# The most important thing here was to turn output buffering of.
	runwithcfg mysql -v -v -n < "$fifo" | grep --line-buffered -Ev "^(|-.*|$FLUSHCMD;?)\$" | while read line; do
		if [ -z "$statusreturned" ]; then
			statusreturned=y
			# TODO: Check whether we actually got an OK response.
			# Call the LVM to create the snapshot. This will block until done.
			createsnapshot
			# Now the database may be accessed again.
			echo -e 'UNLOCK TABLES;\n\\q' > "$fifo"
		fi
	done
	# Remove the FIFO.
	rm "$fifo"
}

# The main backup act.
backup() {
	# Retrieve the list of databases.
	databases="$(getdatabases)"
	
	# List available databases, comma-delimited.
	echo -n "Available databases: "
	echo "$databases" | sed -r -e 's/$/, /' | tr -d '\n' | head -c -2
	echo
	
	# Dump each database.
	echo "$databases" | while read database; do
		if dbfiltered "$database"; then
			echo "Skipping $database (filtered)."
			continue
		fi
		# Build file name according to configured pattern.
		dumpname="$(eval "echo $namepattern")"
		# Split into directory and file name.
		dumpdir="$(dirname "$dumpname")"
		dumpfile="$(basename "$dumpname")"
		echo "$database  ==>  $dumpname"
		# Store the time we started at.
		started="$(date +%s)"
		# Build tempfile name according to configured pattern.
		tempname="$(eval "echo $temppattern")"
		if [ -z "$tempname" ]; then
			# The user wants us to write directly to the final name.
			tempname="$dumpname"
			movetemp=n
		else
			movetemp=y
		fi
		# If we are configured to check for tempfile existence (e.g.
		# because mktemp is used) and the file does not exist, die.
		bool tempexists && [ ! -e "$tempname" ] && die "temporary file $tempname does not exist"
		# If we have enough free disk space, do the actual dumping.
		if checkfreespace "$tempname"; then
			echo -n '  scanning... '
			# Tables in the database.
			tables="$(gettables "$database")"
			# Tables that should be dumped fully.
			datatables="$(gettablesmatching '+' "$database" "$tables")"
			# Tables where only the schema should be dumped.
			nodatatables="$(gettablesmatching '~' "$database" "$tables")"
			# Count the tables.
			tablescount="$(echo "$tables" | wc -l)"
			datatablescount="$(echo "$datatables" | wc -l)"
			nodatatablescount="$(echo "$nodatatables" | wc -l)"
			# If none matched, wc -l still returns 1. Fix that.
			[ -z "$tables" ] && tablescount=0
			[ -z "$datatables" ] && datatablescount=0
			[ -z "$nodatatables" ] && nodatatablescount=0
			echo "$tablescount tables, dumping $datatablescount with data, $nodatatablescount schema-only"
			echo -n '  dumping... '
			(
				# Dump full tables (if any are selected).
				if [ "$datatablescount" -gt 0 ]; then
					echo "$datatables" | while read table; do
						runwithcfg mysqldump $DUMPOPTS "$database" --tables "$table"
					done
				fi
				# Dump table schemas (if any are selected).
				if [ "$nodatatablescount" -gt 0 ]; then
					echo "$nodatatables" | while read table; do
						runwithcfg mysqldump $DUMPOPTS "$database" --no-data --tables "$table"
					done
				fi
			) | "$compresscmd" > "$tempname"
			# If we have to move the tempfile, move it move it.
			[ "$movetemp" = 'y' ] && mv "$tempname" "$dumpname"
			runhook after_dump
			stopped="$(date +%s)"
			seconds="$(expr "$stopped" - "$started")"
			size="$(stat -c %s "$dumpname")"
			megs="$(expr "$size" / 1024 / 1024)"
			echo "ok, $seconds seconds, $megs MiB."
		else # We did not have enough free disk space.
			# If a tempfile was created while expanding the
			# temppattern, it may have to be removed.
			[ "$movetemp" = 'y' ] && rm -f "$tempname"
		fi
	done
}

# Purge older dumps, if configured to.
purge() {
	if [ -z "$purge" ]; then
		echo 'No purging configured.'
		return
	fi
	echo "$purge" | while read line; do
		pattern="$(echo "$line" | cut -d '|' -f 1)"
		date="$(echo "$line" | cut -d '|' -f 2)"
		echo "Purging all '$pattern' older than $date... "
		find -name "$pattern" -and -not -newermt "$date" -print -exec rm '{}' \; | sed -e 's/^/\t/'
	done
}



# Define reasonable defaults for config variables.
user='root'
pass=''
host='localhost'
namepattern='$(date "+%Y-%m-%d_%H-%M-%S")_${database}.sql${compresssuffix}'
temppattern='$dumpname.tmp'
cd='.'
dbfilterdefault='+'
tablefilterdefault='+'
fifo='command.fifo'

# Read command-line options.
purgeonly=n
configfile=mylvmdump.conf
while getopts c:p o; do
	case "$o" in
		c)
			configfile="$OPTARG"
			;;
		p)
			purgeonly=y
			;;
		*)
			exit 1
			;;
	esac
done

# Check for a valid and secure configuration file.
configfile="$(readlink -e "$configfile")" || die 'configuration file does not exist'
[ -r "$configfile" ] || die 'configuration file is not readable'
stat -c %A "$configfile" | grep -q 'w.$' 2>/dev/null && die 'configuration file is world-writable'
stat -c %A "$configfile" | grep -q 'w....$' 2>/dev/null && echo 'SECURITY WARNING: configuration file is group-writable' >&2
# Read configuration values.
source "$configfile" || die 'could not read configuration file'

# Check whether sudo should be used or not.
alias autosudo=
if bool uselvm && [ "$(id -u)" -ne 0 ]; then  # I am not root...
	if which sudo >/dev/null 2>&1; then       # ...but sudo is available
		alias autosudo='sudo -n'
	else                                      # ...and sudo is not available
		echo 'Not running as root, sudo not available. Not using LVM.' >&2
		uselvm=no
	fi
fi

# Check and parse the keepfree value.
# First, translate to upper case and remove spaces.
keepfree="$(echo "$keepfree" | tr a-z A-Z | tr -d ' \t')"
# Now, check for the normal format.
if [ "$keepfree" != "$(echo "$keepfree" | grep -E '^[1-9][0-9]*[KMGTPEZY]B?$')" ]; then
	die "Strange keepfree value '$keepfree'."
elif [ -n "$keepfree" ]; then
	# A value is set, split it into number and suffix.
	keepfree_num="$(echo "$keepfree" | tr -cd '0-9')"
	keepfree_suf="$(echo "$keepfree" | tr -cd 'A-Z')"
else
	# No value is set, clear number and suffix.
	keepfree_num=''
	keepfree_suf=''
fi

# Cut off empty lines in "purge".
purge="$(echo "$purge" | grep -Ev '^[[:space:]]*$')"

# Set the precompress command.
compressdefaults=y # Means "this is a 'normal' compression algorithm".
case "$compress" in
	gzip)
		compresstype=gz
		;;
	bzip2|pbzip2)
		compresstype=bz2
		;;
	*)
		compresscmd='cat' # I call this a useful use of cat.
		compresstype=''
		compresssuffix=''
		compressdefaults=n
		;;
esac
if [ "$compressdefaults" = 'y' ]; then
	compresssuffix=".$compresstype"
	compresscmd="$compress"
fi



# If we're not only purging, we're actually doing backups. Yay!
if ! bool purgeonly; then
	if bool uselvm; then
		# Auto-guess values that are not set.
		if [ -z "$datadir" ]; then
			datadir="$((runwithcfg mysql $PARSEABLE | cut -f 2-) <<-"EOF"
				SHOW VARIABLES WHERE Variable_name='datadir';
				EOF
				)"
			[ -z "$datadir" ] && die 'Cannot guess $datadir, please supply manually.'
		fi
	fi
	# Take a snapshot (if configured to).
	snapshot
	# Change to the directory to put the files into.
	cd "$cd"
	# Do the actual backup.
	backup
fi

# Purge older files.
purge
# If we did a backup, change to the directory we initially were in.
bool purgeonly || cd - >/dev/null
