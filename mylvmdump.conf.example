# This file is sourced as a shell script.
# All shell syntax rules apply -- and all magical things you can do.

# Boolean variables may take these values (case insensitive):
# '' (empty string), '0', '-', 'off', anything starting with n or f (like 'no'
# or 'false') is interpreted as 'no', anything else as 'yes'.


# User name to access the MySQL database.
user='root'

# Password to access the MySQL database.
# Will be supplied securely (via fd) to mysqldump.
pass='5o0p3r$e(uRe'

# Database host to contact.
host='dbserver'


# Compression tool to use. Current choices are:
# gzip   (any non-ancient version should work)
# bzip2  (same here)
# pbzip2 (you need >=1.0.3)
# cat    (will not compress at all; the default)
compress='gzip'


# Controls which databases will be backed up and which not. Format is:
# One expression per line, consisting of an optional mode prefix, an inclusion
# flag (+ or -) and the database name or expression (depending on the mode
# prefix). Mode prefixes are: "." for exact matches, the default (i.e. can be
# omitted). "^" for regular expression matches, anything your local grep -E
# supports is available. The inclusion flag decides whether the database will be
# dumped (+) or not (-). The last matching line wins. Mode prefixes must come
# before the flag. No whitespace between any component.
dbfilter='
^-^log.*
-useless
.+logarithms
'

# The default inclusion flag, if no dbfilter line matches.
dbfilterdefault='+'

# The same thing is possible for tables. The major difference is that the filter
# rules are specified in multiple variables, one for each database. The variable
# is named "tablefilter_HASH_VALUE", where HASH is a hash function name and
# VALUE is the hash value of the database name. This is required because
# database names can contain characters which are not valid in shell variable
# names. Allowed hash functions are currently "md5", "sha1" and "sha512", if
# they are available on your system (else the variable will be ignored). Get the
# hash value for example by running "echo -n 'crazy db-name' | md5sum". Pay
# attention not to include a newline character in the database name (hence -n).
# If your database name only consists of a-zA-Z0-9_ and starts with a letter
# (most should), you may also use the shorthand variable name
# "tablefilter__NAME". Note that the dash ("-") is _not_ an allowed character.
# If you want to use a shared filter list for _all_ tables, set "tablefilter" to
# it. This list will then be prepended to all database-specific expressions.
# Available inclusion flags are not only "+" (include) and "-" (exclude), but
# also "~", which means "no data" and will only dump the CREATE TABLE statement,
# but not include the table's data.

# First of all, exclude the table "nonsense" in each database where it occurs.
tablefilter='
-nonsense
'

# Exclude the data of the tables starting with "log_" in the "foo" database.
tablefilter__foo='
^~^log_
'

# Finally, include the "nonsense" table in the database called "...".
tablefilter_md5_2f43b42fd833d1e77420a8dae7419000='
+nonsense
'

# See the dbfilterdefault variable. "~" is allowed.
tablefilterdefault='+'


# File name pattern of the generated files.
# You may insert any shell construct here, although variables should be
# sufficient fo most users. Some variables you might want to use are:
# $database        name of the database, e.g. 'mediawiki'
# $compresstype    'gz', 'bz2' or the empty string '' if not compressing
# $compresssuffix  $compresstype, but prefixed by a dot if non-empty ('.gz')
# $(date "+...")   see date(1) for the available options
# This string will be evaluated using "eval", so please put it in single quotes,
# use double quotes inside it and don't add security holes. If a variable name
# is followed by a character that's valid in variable names, use the syntax
# '${variable}moretext' as shown in the example. If unsure, always use {}.
namepattern='$(date "+%Y-%m-%d_%H-%M-%S")_${database}.sql${compresssuffix}'

# Temporary file name while dumping. Set to the empty string to dump directly
# into the final file name. You may use the same variables and constructs as in
# namepattern. Additionally, you can access the expanded namepattern itself as
# ${dumpname}. Use of mktemp is suggested. Please see the tempexists setting.
temppattern='$(mktemp -q --tmpdir=. "$dumpname.tmp.XXXXXXXXXX")'

# Whether the file name in temppattern should be checked fo existence. If this
# is set, mylvmdump will exit with an error if the temp file does not already
# exist. This is useful when using mktemp: If mktemp cannot create the file,
# mylvmdump will (and should) stop.
tempexists='yes'

# Refuse to create another dump if the free disk space sinks below this value.
# You may use suffixes like K, M, G, T etc. Note that this is only checked
# before each dump. No further checks will be made while the dump of a single
# database is running, so make sure no dump will be larger than this value.
keepfree='4G'


# Since you might want to delete older dumps on a regular basis, mylvmdump makes
# it easy. Enter a file pattern and a date(1) compatible time specification to
# select the maximum file age, delimited by a pipe character ("|"). You may
# enter multiple lines to do several runs with different patterns or times.
# Internally this is passed to "find -name PATTERN -and -not -newermt TIME",
# you are encouraged to test your patterns using find(1). The example will
# delete some files if they are older than 6 hours, others if older than 24.
purge='
????-??-??_??-??-??_*.sql.*|6 hours ago
*.sql.*|24 hours ago
'


# Hooks are a powerful way to extend mylvmdump's behavior. They are called
# before or after certain actions and allow you to run custom code.

# after_dump(): Called after a successful dump, i.e. after moving the temp file
# (if any) to its final file name. Useful variables are $database and $dumpname.
# This example will hard-link the file to a "daily" snapshot if the time is
# between 4am and 8am. (Think of 4-hourly snapshots, one of which is selected as
# the "daily" one.)
after_dump() {
	hour="$(date +%-H)"
	if [ "$hour" -ge 4 -a "$hour" -lt 8 ]; then
		dailyname="$(echo "$dumpname" | sed -r -e 's/^([0-9-]+_)[0-9-]+_(.+)$/\1\2/')"
		ln "$dumpname" "$dailyname"
	fi
}
